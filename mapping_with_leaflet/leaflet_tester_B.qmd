---
title: "Leaflet_tester"
date: 08-08-2023
categories: [Data-Viz, R, leaflet, quarto, problem solving, mapping, Code-Along, spatial join] # self-defined categories
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

# Project Overview

I'm working on a project for my father that will culminate in a website for his genealogy research. [There are a couple of different parts](https://lsinks.github.io/currentprojects.html) that I'm working on independently. In a [previous part of the project](https://lsinks.github.io/posts/2023-08-04-data-cleaning-tombstone/tombstones_data_cleaning.html), I matched an excel sheet with GPS coordinates and some biographic data with photos of various tombstones. This part involves making a leaflet map of various family grave sites.

In this part, I'm going to show you how to create a nicely styled leaflet map. I will use the R packages [leaflet](https://CRAN.R-project.org/package=leaflet) and [leafpop](https://CRAN.R-project.org/package=leafpop). While the package leaflet.extras has some nice features, the contributor stopped maintaining it in 2018 and [recommends against using it for security reasons](https://github.com/bhaskarvk/leaflet.extras#readme). There is a [leaflet.extras2](https://CRAN.R-project.org/package=leaflet.extras2) package, but it doesn't have functionality that I want.

# Setting Up

## Loading Libraries

I'll include more info and reference information about the packages at the code blocks where I use them.

```{r}
#| label: loading-libraries
#| warning: false
#| output: false
library(tidyverse) # who doesn't want to be tidy?
library(gt) # for nice tables
library(sf) # for handling geo data
library(here) # reproducible file paths

library(htmltools)
library(htmlwidgets)
library(leafpop)
library(leaflet) # mapping


```

## File Folder Names and Loading Data

Here set-up some variables that I use for the file/ folder structure and I read in the spreadsheet.

```{r}
#| label: reading-data
#| warning: false
#| output: false

# folder names
blog_folder <- "mapping_with_leaflet"
photo_folder <- "Map"
```

Reading in the data. This is data created by the previous portion of the project. There are also a bunch of photos in the `Map` folder. The specific photo that is associated with a given entry is listed in the `photo_list` column.

```{r}
tombstones_geo <- readRDS(here(blog_folder, "tombstones_geo.RDS"))

head(tombstones_geo) %>% gt()
```

# About Leaflet

[Leaflet is a JavaScript library](https://leafletjs.com/index.html). The R package leaflet provides an interface to many of the core leaflet features. The options for leaflet maps are endless; the R package documentation is a high level overview and delving into the JavaScript documentation for details is a must if you want to do a lot of customization. You can also extend R leaflet by calling [JavaScript plugins within R leaflet](http://rstudio.github.io/leaflet/extending.html). This is beyond the scope of this tutorial. Since the number of plugins/libraries/extensions for leaflet in JavaScript is extensive, it is worth being aware of this option.

Here, I'm going to stick with features available in the R leaflet packages, though I will pass some options that I found in the JavaScript documentation.

# Handling Overlapping Points?

Some tombstones are very close together and have the same GPS coordinates. I initially solved this by using [`sf_jitter()` to jitter the coordinates](https://lsinks.github.io/posts/2023-08-04-data-cleaning-tombstone/tombstones_data_cleaning.html#converting-to-geo-data), but I didn't optimize it at all. Here I'm going to demonstrate a few different ways to handle this issue.

First, how many overlapping points do I have?

```{r}
#| label: table-duplicate-geos
test <-
  tombstones_geo %>% 
  group_by(geometry) %>% 
  count(geometry, sort = TRUE) %>% 
  filter(n > 1)

test %>% gt() %>% 
  tab_options(container.height = px(300), container.padding.y = px(24))
```

27 sets of identical coordinates corresponding to 55 individual graves. This is roughly 30% of the dataset, so this isn't an issue that can just be glosssed over

Now let's make a set of entries that are only duplicates. To join spatial data, we need to use [`st_join()`](https://r-spatial.github.io/sf/reference/st_join.html). This function has two joining parameters. One is join, which defaults to `st_intersects()`. The other join parameter is set with the parameter left. If `left = TRUE` then the function returns a left join, otherwise, and inner join. That is, I expect left = TRUE to return 194 records and FALSE to return 55 records.

There are other types of spatial joins you can perform with `st_join()` beyond intersects, including `st_touches()` and `st_within()`, so check the documentation for if you want to do other types of spatial filtering and joining.

```{r}
#| label: spatial-join
test_for_jitter_left <- tombstones_geo %>% 
  st_join(test, left = TRUE) 
nrow(test_for_jitter_left)

test_for_jitter_inner <- tombstones_geo %>% 
  st_join(test, left = FALSE)
nrow(test_for_jitter_inner)

```

# Building a Simple Map

I'm going work on this problem using the one set of coordinate where there are 3 tombstones.

```{r}
#| label: site-with-three-graves
test <- test_for_jitter_inner %>%
  filter(n == 3)
```

Here is the simplest leaflet map we can make. The procedure is to initialize leaflet, add an underlying map (add_Tiles) and then add my markers with the label (addCircleMarkers) from my dataframe. The layerID is so we can remove this object later.

## Default Map

```{r}
#| label: default-leaflet-map

simple_map <- leaflet() %>%
  addTiles() %>%
  addScaleBar() %>%
  addCircleMarkers(data = test,
                   label = ~ (paste(complete_name, cemetery_name, sep = " ")))
simple_map
```

The idea choice would be to "spiderify" this map. Spiderifying disperses the points as you zoom in (as we will see with the clustering option). There is a javascript module for spiderifying in can be found [here](#0), but I'm not going to learn how extend leaflet with javascript now.

## MarkerCluster Map

Now, MarkerCluster does include spiderifying. I'm going to go back to the 55 data points set just to illustrate the clustering more clearly

```{r}
#| label: markercluster-map
cluster_map <- leaflet() %>%
  addTiles() %>%
  addScaleBar() %>%
  addCircleMarkers(
    data = test,
    label = ~ (paste(complete_name, cemetery_name, sep = " ")), 
    clusterOptions = markerClusterOptions(),
    )
cluster_map
    
```

It does separate the points, but it is very hard to click on correct portion of the dot to get the label or pop-up. I think you need to hover on the part of the circle marker that does not overlap with either the cluster marker or the or the other circle markers. This can be solved by making the circle markers very large, so there is more non-overlapping area, but this is ugly. It turns out you can also set the spiderifying distance for the `markerCluster`. Documentation is back in the [js library](https://github.com/Leaflet/Leaflet.markercluster#other-options) documentation, and not covered in [the R manua](https://cran.r-project.org/web/packages/leaflet/leaflet.pdf)l.

(Click on a cluster. It will zoom and split the point as you keep clicking until you end up with just the points with the same coordinates.)

```{r}
#| label: markercluster-map-more-spiderified
#| column: page


cluster_map_separated <- leaflet() %>%
  addTiles() %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addScaleBar() %>%
  addCircleMarkers(
    data = test,
    label = ~ (paste(complete_name, cemetery_name, sep = " ")), 
    clusterOptions = markerClusterOptions(spiderfyDistanceMultiplier= 2)
  ) 

cluster_map_separated
```

## Using sf_jitter

The other option for handling this problem (and my original approach) is to jitter the points using `st_jitter(`). I think this approach wasn't as bad as I originally thought. I was guessing which points should have been originally the same location based on cemetery name, but I think probably many of them were in the same cemetery, but with different coordinates to start with.

The function st_jitter() takes two parameters, amount and factor. Most examples I've seen just use factor, which is what I did. The parameter factor is the "fractional amount of jittering to be applied" and amount defaults to the "bounding box diagonal".

This function does require that amount be specified if you

I'm not sure why, but it doesn't work on our test set (with 3 entries at the same location).

```{r}
#| label: spatial-jitter-small

test_jittered <- test %>%
  st_jitter(amount = 1,  factor = 0.00001)

test_jittered %>% select(geometry)
test %>% select(geometry)

```

It does jitter the whole set though.

```{r}
#| label: spatial-jitter-large
test_jittered_all <- test_for_jitter_inner %>%
  st_jitter( factor = 0.00001) 

test_jittered_all %>% select(geometry) %>% head() %>% gt()
test_for_jitter_inner %>% select(geometry) %>% head() %>% gt()
```

So here is the jittered map.

```{r}
#| label: map-spatial-jitter-large


map_sf_jitter_all <- leaflet() %>%
  addTiles() %>%
  addScaleBar() %>%
  addCircleMarkers(
    data = test_jittered,
    label = ~ (paste(complete_name, cemetery_name, sep = " ")),radius = 10,
    stroke = NA
  ) 

map_sf_jitter_all
```

This works OK, but the zooming experience is very unpleasant. With the clustered option, the map is zoomed and centered as you click through the clusters. There is also a very clear indication (the number in the cluster) that there are multiple data points in the dot. Here, more data points make a darker circle, but this isn't crystal clear.

# Styling the Clustered Map

So, I'm going to go with the clustered version.

## Make a nice label formatted with HTML

I'd like a pop-up with the picture, but there is a lot of missing data, so I need to construct the info box carefully or it will be full of NAs.

```{r}
#| label: dob-dod-formatting

tombstones_geo %>% select(DOB, DOD)

tombstones_geo <- tombstones_geo %>%
  mutate(dob_label = ifelse(is.na(DOB) == TRUE, "", paste0("Born: ", DOB)))

tombstones_geo <- tombstones_geo %>%
  mutate(dod_label = ifelse(is.na(DOD) == TRUE, "", paste0("Died: ", DOD)))
```

Playing with the map, I see that two entries have the state in both the city and the state column, so I'm going to fix that.

```{r}
#| label: fixing-duplicate-states-in-city
tombstones_geo %>% filter(Surname == "Brown") %>% select(City, State)

tombstones_geo <-
  tombstones_geo %>%
  mutate(City = ifelse(City == "Egypt, Lehigh Co., PA", "Egypt, Lehigh Co.", City)
)
```

## Cleaning the City Field

The formatting of the city column is pretty inconsistent. I'm going to clean it up also.

```{r}
#| label: clean-city
tombstones_geo <-
  tombstones_geo %>%
  mutate(City = str_replace_all(City, "Co\\.", "County")) %>%
  mutate(City = str_replace_all(City, "Co$", "County"))         
```

In leaflet, it seems that labels require that the html be generated with `htmltools::HTML`, while popups understand html tags already and can just be passed something like `paste("<strong>", complete_name, "</strong>")`. Since I was playing around with what info was displayed in label vs. popup, I just rendered everything with `htmltools::HTML` so I could switch things around without having to modify the text. There is a nice demonstration of the difference between labels and pop-ups on the [Dr.Data.King blog](https://www.drdataking.com/post/how-to-add-multiple-lines-label-on-a-leaflet-map/).

```{r}
#| label: html-formating-info-box
tombstones_geo <- tombstones_geo %>%
  mutate(
    boxinfo = paste0(
      "<strong>",
      complete_name ,
      "</strong>",
      "<br/><hr>",
      dob_label,
      " ",
      dod_label,
      "<br/><hr>",
      cemetery_name ,
      " in ",
      City,
      " , ",
      State,
      "<br/>"
    ) %>%
      lapply(htmltools::HTML)
  )

```

# Back to clustering

The MarkerClusters and the popup with the picture need [to be linked by group](https://github.com/r-spatial/leafpop/issues/14). There is a pop-up generated in the addCircleMarkers with the text info. When `addPopupImages()` is called, it just appends the photos to that text. I couldn't find a way to directly add text to the `addPopupImages()` call.

```{r}
#| label: final-cluster-map
#| column: page
image_list <- tombstones_geo$photo_list
final_map <- leaflet() %>%
  addTiles() %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addScaleBar() %>%
  addCircleMarkers(
    data = tombstones_geo,
    label = ~ lapply(
      paste("<strong>", complete_name, "</strong>"),
      htmltools::HTML
    ),
    #label = ~ (paste("<strong>",complete_name, "</strong>")),
    popup = ~ boxinfo,
    clusterOptions = markerClusterOptions(
      spiderfyDistanceMultiplier = 2,
      maxClusterRadius = 50
    ),
    radius = 10,
    stroke = NA,
    group = "group1"
  ) %>%
  leafpop::addPopupImages(
    image = paste0(here(blog_folder, photo_folder), "/", image_list),
    src = local,
    group = "group1",
    width = 400,
    maxHeight = 300,
    maxWidth = 400
  )
```

```{r}
#| label: viewing-final-map
final_map
```

```{r}
#| label: saving-map
#library(htmlwidgets)
saveWidget(final_map, file ="map_to_upload.html")
```

# Publishing this on WordPress

https://wpastra.com/guides-and-tutorials/embed-iframe-in-wordpress/

https://www.thinkingondata.com/embedding-a-leaflet-map-on-wordpress/

# Conclusions

The final map is published [here](http://sinksfamilyhistory.com/tombstones/). It

Good Tutorials

https://www.jla-data.net/eng/leaflet-in-r-tips-and-tricks/

https://rstudio-pubs-static.s3.amazonaws.com/307862_b8c8460272dc4a2a9023d033d5f3ec34.html
